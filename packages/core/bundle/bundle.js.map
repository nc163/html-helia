{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,GAAG;AACd,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8BAA8B;AACnE;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACtBa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc,GAAG,aAAa,GAAG,aAAa;AAC9C;AACA;AACA,sCAAsC,mBAAO,CAAC,wDAAa;AAC3D,gCAAgC,mBAAO,CAAC,gCAAS;AACjD,aAAa;AACb,gCAAgC,mBAAO,CAAC,gCAAS;AACjD,aAAa;AACb,iCAAiC,mBAAO,CAAC,wCAAU;AACnD,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACpCa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sCAAsC,mBAAO,CAAC,mDAAe;AAC7D,sCAAsC,mBAAO,CAAC,mDAAe;AAC7D,sCAAsC,mBAAO,CAAC,mDAAe;AAC7D,qCAAqC,mBAAO,CAAC,iDAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC7Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACpBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC9Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uCAAuC;AACvC,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA,kBAAe;AACf;;;;;;;;;;AC5Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAe;AACf;;;;;;;;;;AClBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,mBAAO,CAAC,2IAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC;AACA,2DAA2D,MAAM;AACjE,uDAAuD,MAAM;AAC7D,qDAAqD,MAAM,oCAAoC,MAAM;;AAErG;AACA;AACA;;AAEA,cAAc;AACd,aAAa;AACb,YAAY;;AAEZ;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;UC9IA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://@ipfs-tag/core/./dist/fetch.js","webpack://@ipfs-tag/core/./dist/index.js","webpack://@ipfs-tag/core/./dist/insert/index.js","webpack://@ipfs-tag/core/./dist/insert/insertAudio.js","webpack://@ipfs-tag/core/./dist/insert/insertImage.js","webpack://@ipfs-tag/core/./dist/insert/insertText.js","webpack://@ipfs-tag/core/./dist/insert/insertVideo.js","webpack://@ipfs-tag/core/./dist/parse.js","webpack://@ipfs-tag/core/./node_modules/media-typer/index.js","webpack://@ipfs-tag/core/webpack/bootstrap","webpack://@ipfs-tag/core/webpack/before-startup","webpack://@ipfs-tag/core/webpack/startup","webpack://@ipfs-tag/core/webpack/after-startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {Helia<Libp2p>} node\n * @param {*} this.element\n * @returns {ArrayBuffer} content\n */\nasync function fetch(fs, context) {\n    /**\n     * ipfs.cat\n     * https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfscatipfspath-options\n     * https://discuss.ipfs.tech/t/how-to-ipfs-dag-get-the-image-in-browser/15938/3\n     */\n    const content = [];\n    for await (const chunk of fs.cat(context.cid)) {\n        content.push(chunk);\n    }\n    const blob = new Blob(content, { type: context.mediatype.type });\n    return blob;\n}\nexports.default = fetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insert = exports.fetch = exports.parse = void 0;\n// import isIPFS from 'is-ipfs'\n// @ts-ignore\nconst media_typer_1 = __importDefault(require(\"media-typer\"));\nconst parse_1 = __importDefault(require(\"./parse\"));\nexports.parse = parse_1.default;\nconst fetch_1 = __importDefault(require(\"./fetch\"));\nexports.fetch = fetch_1.default;\nconst insert_1 = __importDefault(require(\"./insert\"));\nexports.insert = insert_1.default;\n/**\n *\n * @param ipfs IPFS\n * @param options Options\n * @returns\n */\nconst IPFSTag = async (fs, element) => {\n    if (element.dataset.cid !== \"string\")\n        return false;\n    let cid = element.dataset.cid;\n    if (typeof element.dataset.mediatype !== \"string\")\n        return false;\n    let mediatype = media_typer_1.default.parse(element.dataset.mediatype);\n    let encord = element.dataset.encord;\n    let params = (0, parse_1.default)(cid, mediatype, encord);\n    if (!params)\n        return false;\n    let blob = await (0, fetch_1.default)(fs, params);\n    (0, insert_1.default)(element, params, blob);\n};\nexports.default = IPFSTag;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst insertAudio_1 = __importDefault(require(\"./insertAudio\"));\nconst insertVideo_1 = __importDefault(require(\"./insertVideo\"));\nconst insertImage_1 = __importDefault(require(\"./insertImage\"));\nconst insertText_1 = __importDefault(require(\"./insertText\"));\nasync function insert(element, params, blob) {\n    const reader = new FileReader();\n    switch (params.mediatype.type.toLowerCase()) {\n        case 'text':\n            (0, insertText_1.default)(element, params, blob, reader);\n            break;\n        case 'image':\n            (0, insertImage_1.default)(element, params, blob, reader);\n            break;\n        case 'audio':\n            (0, insertAudio_1.default)(element, params, blob, reader);\n            break;\n        case 'video':\n            (0, insertVideo_1.default)(element, params, blob, reader);\n            break;\n        default:\n            return false;\n    }\n}\nexports.default = insert;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {Blob} blob\n */\nasync function insertAudio(element, params, blob, reader) {\n    const tagname = element.tagName;\n    // const media = mediatype.fromString(element.dataset.mediatype)\n    // const encord = element.dataset?.encord || null\n    reader.addEventListener('load', (event) => {\n        if (typeof event.target?.result !== 'string')\n            return false;\n        if (tagname === 'AUDIO') {\n            element.src = event.target.result;\n        }\n    });\n    reader.readAsDataURL(blob);\n}\nexports.default = insertAudio;\n//# sourceMappingURL=insertAudio.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {IPFS} ipfs\n */\nasync function insertImage(element, params, blob, reader) {\n    const tagname = element.tagName;\n    if (element == null)\n        return false;\n    reader.addEventListener('load', (event) => {\n        if (typeof event.target?.result !== 'string')\n            return false;\n        switch (element) {\n            case element:\n                element.src = event.target.result;\n                break;\n            // case element as HTMLCanvasElement:\n            //   const img = new Image();\n            //   img.src = event.target.result;\n            //   element.clearRect(0, 0, element.width, element.height);\n            //   element.getContext(\"2d\").drawImage(img, 0, 0);\n            //   break;\n            default:\n                break;\n        }\n    });\n    reader.readAsDataURL(blob);\n}\nexports.default = insertImage;\n//# sourceMappingURL=insertImage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {IPFS} ipfs\n */\nasync function insertText(element, params, blob, reader) {\n    // const media = MediaType.parse(element.dataset.mediatype)\n    const encord = element.dataset?.encord || null;\n    reader.onload = (event) => {\n        if (typeof event.target?.result !== 'string')\n            return false;\n        switch (params.mediatype.subtype) {\n            case 'plain':\n                element.innerText = escapeHtml(replaceControlCharacters(event.target.result));\n                break;\n            case 'html':\n                return false;\n                // element.innerHTML = replaceControlCharacters(event.target.result);\n                break;\n            case 'css':\n                return false;\n                // element.innerHTML = event.target.result;\n                break;\n            case 'javascript':\n                return false;\n                // element.innerHTML = event.target.result;\n                break;\n            default:\n        }\n    };\n    reader.readAsText(blob, params.encord);\n}\nfunction replaceControlCharacters(str, replacementStr = '') {\n    return str; //.replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g,replacementStr)\n}\nfunction escapeHtml(htmlStr) {\n    return htmlStr.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#39;\");\n}\nexports.default = insertText;\n//# sourceMappingURL=insertText.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {Blob} blob\n */\nasync function insertVideo(element, params, blob, reader) {\n    const tagname = element.tagName;\n    reader.addEventListener('load', (event) => {\n        if (typeof event.target?.result !== 'string')\n            return false;\n        if (tagname === 'VIDEO') {\n            element.src = event.target.result;\n        }\n    });\n    reader.readAsDataURL(blob);\n}\nexports.default = insertVideo;\n//# sourceMappingURL=insertVideo.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst multiformats_1 = require(\"multiformats\");\nfunction parse(cid, mediaType, encord) {\n    return {\n        cid: multiformats_1.CID.parse(cid),\n        mediatype: mediaType,\n        encord: encord || undefined\n    };\n    // return {\n    //   cid: cid,\n    //   mediatype: {\n    //     type: MediaType.fromString(element.dataset.mediatype).type.toLowerCase(),\n    //     subtype: MediaType.fromString(element.dataset.mediatype).subtype.toLowerCase(),\n    //   },\n    //   encord: element.dataset.encord || undefined\n    // };\n}\nexports.default = parse;\n//# sourceMappingURL=parse.js.map","/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./dist/index.js\");\n",""],"names":[],"sourceRoot":""}